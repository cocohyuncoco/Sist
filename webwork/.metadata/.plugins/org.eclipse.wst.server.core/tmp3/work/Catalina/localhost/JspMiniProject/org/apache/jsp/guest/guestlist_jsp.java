/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.59
 * Generated at: 2022-05-09 08:25:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.guest;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Vector;
import data.dto.AnswerDto;
import data.dao.AnswerDao;
import data.dao.MemberDao;
import java.text.SimpleDateFormat;
import data.dto.GuestDto;
import data.dao.GuestDao;
import java.util.ArrayList;
import java.util.List;

public final class guestlist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("data.dto.GuestDto");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.Vector");
    _jspx_imports_classes.add("data.dao.MemberDao");
    _jspx_imports_classes.add("data.dto.AnswerDto");
    _jspx_imports_classes.add("data.dao.AnswerDao");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("data.dao.GuestDao");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\">\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css2?family=Black+Han+Sans&family=Nanum+Pen+Script&family=Single+Day&family=Song+Myung&family=Stylish&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js\"></script>\r\n");
      out.write("<style>\r\n");
      out.write("	span.day{\r\n");
      out.write("		float:right; \r\n");
      out.write("		font-size: 11pt;\r\n");
      out.write("		color: gray;\r\n");
      out.write("	}\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	$(function () {\r\n");
      out.write("		\r\n");
      out.write("		//추천누르면 1증가\r\n");
      out.write("		$(\"span.likes\").click(function () {\r\n");
      out.write("			\r\n");
      out.write("			let num = $(this).attr(\"num\");\r\n");
      out.write("			let tag = $(this);\r\n");
      out.write("			//alert(num);			\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				\r\n");
      out.write("				type:\"get\",\r\n");
      out.write("				dataType:\"json\",\r\n");
      out.write("				url:\"guest/ajaxlikechu.jsp\",\r\n");
      out.write("				data:{\"num\":num},\r\n");
      out.write("				success:function(data){\r\n");
      out.write("					//alert(data.chu);\r\n");
      out.write("					tag.next().text(data.chu);\r\n");
      out.write("					\r\n");
      out.write("					//추천 누르면 하트보이게\r\n");
      out.write("					tag.next().next().animate({\"font-size\":\"16px\"},500,function () {\r\n");
      out.write("						//성공한다음엔 어떡할건지 여기씀\r\n");
      out.write("						//애니메이션이 끝난후 다시 글꼴 0으로 변경 \r\n");
      out.write("						$(this).css(\"font-size\",\"0px\");\r\n");
      out.write("					});					\r\n");
      out.write("				}\r\n");
      out.write("			});			\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		//댓글부분 무조건 안보이게\r\n");
      out.write("		$(\"div.answer\").hide();\r\n");
      out.write("		//클릭시 보였다 안보였다\r\n");
      out.write("		$(\"span.anser\").click(function () {\r\n");
      out.write("			$(this).parent().find(\"div.answer\").toggle();\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		//댓글삭제 이벤트..ajax으로\r\n");
      out.write("		//새로고침..location.reload\r\n");
      out.write("		$(\"span.adel\").click(function () {\r\n");
      out.write("			\r\n");
      out.write("			let idx = $(this).attr(\"idx\");\r\n");
      out.write("			//alert(idx);\r\n");
      out.write("			\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				type:\"get\",\r\n");
      out.write("				dataType:\"html\",\r\n");
      out.write("				url:\"guest/answerdelete.jsp\",\r\n");
      out.write("				data:{\"idx\":idx},\r\n");
      out.write("				success: function () {\r\n");
      out.write("					\r\n");
      out.write("					//성공하면 새로고침\r\n");
      out.write("					location.reload();\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("		})\r\n");
      out.write("		\r\n");
      out.write("	})\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");

	//로그인 상태 확인후 입력폼 나타내기
	String loginok = (String)session.getAttribute("loginok");

	//dao선언
	GuestDao dao = new GuestDao();
	
	//페이징 처리에 필요한변수
	int totalCount; //총 글수
	int totalpage; //총 페이지수
	int startPage; //각 블럭의 시작페이지
	int endPage; //각 블럭의 끝페이지
	int start; //각 페이지의 시작번호
	int perpage=3; //한페이지에 보여질 글 갯수
	int perBlock=5; //한 블럭당 보여지는 페이지 갯수
	int currentPage; //★현재페이지★
	
	
	//총갯수
	totalCount = dao.getTotalCount();
	
	//현재 페이지 번호 읽기(단 null일 경우는 1페이지로 설정)
	if(request.getParameter("currentPage")==null)
		currentPage = 1;
	else
		currentPage = Integer.parseInt(request.getParameter("currentPage"));
	
	//총페이지 갯수 구하기
	totalpage=totalCount/perpage+(totalCount%perpage==0?0:1);
	
	//각 블럭의 시작페이지 구하기
	//예: 현재페이지가 3인경우 startpage 1,endpage 5
	//예: 현재페이지가 6인경우 startpage 5,endpage 10
	startPage = (currentPage-1)/perBlock*perBlock+1;
	endPage = startPage+perBlock-1;
	
	//만약 총페이지가 8 -2번째 블럭: 6-10 ..이럴경우는 endpage를 8로 수정되어야함
	if(endPage>totalpage) endPage=totalpage;
	
	//각 페이지에서 불러올 시작번호
	start=(currentPage-1)*perpage;
	
	//각페이지에서 필요한 게시글
	List<GuestDto> list = dao.getList(start, perpage);
			
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");

      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("	");

		//form을 보여줄려고 받은거고
		if(loginok!=null){
      out.write("\r\n");
      out.write("			");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "guestform.jsp", out, false);
      out.write("\r\n");
      out.write("			<hr align=\"left\" width=\"700\">\r\n");
      out.write("		");
}
	
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	<!-- <b>방명록 리스트 출력</b> -->\r\n");
      out.write("<div>\r\n");
      out.write("	<b>총 ");
      out.print(totalCount );
      out.write("개의 방명록 글이 있습니다</b>\r\n");
      out.write("	");

		MemberDao mdao = new MemberDao();
		for(GuestDto dto:list){
			//이름얻기__아이디를 알면 이름을 얻어올수있음
			String name = mdao.getName(dto.getMyid());
			
      out.write("\r\n");
      out.write("			<table class=\"table table-bordered\" style=\"width:600px;\">\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>\r\n");
      out.write("						<b><span class=\"glyphicon glyphicon-user\"></span>");
      out.print(name );
      out.write('(');
      out.print(dto.getMyid() );
      out.write(")</b>\r\n");
      out.write("						");

						//로그인한 아이디
						String myid = (String)session.getAttribute("idok");
						//로그인한 아이디와 글을 쓴 아이디가 같을때만 수정, 삭제되게 한다
						if(loginok!=null && dto.getMyid().equals(myid)){//로그인 중 이라면
						
      out.write("\r\n");
      out.write("							| <a href=\"index.jsp?main=guest/updateform.jsp?num=");
      out.print(dto.getNum() );
      out.write("&currentPage=");
      out.print(currentPage);
      out.write("\">수정</a>\r\n");
      out.write("							| <a href=\"guest/delete.jsp?num=");
      out.print(dto.getNum());
      out.write("&currentPage=");
      out.print(currentPage);
      out.write("\">삭제</a>\r\n");
      out.write("							<!-- 삭제는 인덱스를 안거친다. 인덱스에 안나타나고 넘기고 끝이기때문 -->\r\n");
      out.write("						");
}							
						
      out.write("\r\n");
      out.write("						<span class=\"day\">");
      out.print(sdf.format(dto.getWriteday()) );
      out.write("</span>\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				\r\n");
      out.write("				<tr height=\"120\">\r\n");
      out.write("					<td>\r\n");
      out.write("						<a href=\"save/");
      out.print(dto.getPhotoname());
      out.write("\" target=\"_blenk\">\r\n");
      out.write("							<img alt=\"\" src=\"save/");
      out.print(dto.getPhotoname());
      out.write("\" align=\"left\" style=\"max-width:150px; margin-right: 20px;\">\r\n");
      out.write("						</a>						\r\n");
      out.write("						");
      out.print(dto.getContent().replace("\n", "<br>") );
      out.write("\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				\r\n");
      out.write("				<!-- 댓글, 추천 -->\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>\r\n");
      out.write("						<!-- 댓글 들어갈곳(댓글입력폼) (댓글출력폼)-->\r\n");
      out.write("						");

						//각 방명록에 달린 댓글목록 가져오기
						AnswerDao adao = new AnswerDao();
						List<AnswerDto> alist = adao.getAllAnswer(dto.getNum());						
						
      out.write("						\r\n");
      out.write("						<span class=\"anser\" style=\"cursor: pointer;\" num=\"");
      out.print(dto.getNum() );
      out.write("\">댓글 ");
      out.print(alist.size() );
      out.write("</span>\r\n");
      out.write("						<span class=\"likes\" style=\"cursor: pointer;\" num=\"");
      out.print(dto.getNum() );
      out.write("\">추천</span>\r\n");
      out.write("						<span class=\"chu\">");
      out.print(dto.getChu() );
      out.write("</span>						\r\n");
      out.write("						<!-- 추천 누르기전엔 size 0 -->\r\n");
      out.write("						<span class=\"glyphicon glyphicon-heart\" style=\"color:red; font-size:0px;\"></span>						\r\n");
      out.write("												\r\n");
      out.write("					<div class=\"answer\">\r\n");
      out.write("						");

						if(loginok!=null){
      out.write("\r\n");
      out.write("							<div class=\"answerform\">\r\n");
      out.write("								<form action=\"guest/answerinsert.jsp\" method=\"post\">\r\n");
      out.write("									<!-- hidden -->\r\n");
      out.write("									<input type=\"hidden\" name=\"num\" value=\"");
      out.print(dto.getNum());
      out.write("\">\r\n");
      out.write("									<input type=\"hidden\" name=\"myid\" value=\"");
      out.print(myid );
      out.write("\">\r\n");
      out.write("									<input type=\"hidden\" name=\"currentPage\" value=\"");
      out.print(currentPage);
      out.write("\">\r\n");
      out.write("									<table>\r\n");
      out.write("										<tr>\r\n");
      out.write("											<td width=\"480\">\r\n");
      out.write("												<textarea style=\"width: 470px; height: 40px;\" name=\"content\" required=\"required\"\r\n");
      out.write("												class=\"form-control\"></textarea>\r\n");
      out.write("											</td>\r\n");
      out.write("											<td>\r\n");
      out.write("												<button type=\"submit\" class=\"btn btn-info\" style=\"width:70px; height:40px;\">등록</button>\r\n");
      out.write("											</td>\r\n");
      out.write("										</tr>\r\n");
      out.write("									</table>\r\n");
      out.write("								</form>										\r\n");
      out.write("							</div>\r\n");
      out.write("						");
}	
      out.write("\r\n");
      out.write("						<div class=\"answerlist\" style=\"background-color:#eee;\">\r\n");
      out.write("						<table style=\"width:500px;\">\r\n");
      out.write("						");

							for(AnswerDto adto:alist){ //이미 dto, list 있어서 a앞에 붙인거임
						
      out.write("\r\n");
      out.write("					 <tr>\r\n");
      out.write("						<td width=\"60\" align=\"left\">\r\n");
      out.write("					  		<span class=\"glyphicon glyphicon-user\" style=\"font-size:20pt;\"></span>\r\n");
      out.write("						</td>\r\n");
      out.write("						<td>\r\n");
      out.write("							");

							  //댓글 작성자명 얻기
							  String aname = mdao.getName(adto.getMyid());
							
      out.write("\r\n");
      out.write("							<br>\r\n");
      out.write("							<b>");
      out.print(aname );
      out.write("</b>&nbsp;\r\n");
      out.write("							");

						    //글작성자와 댓글쓴 작성자가 같을경우
							if(dto.getMyid().equals(adto.getMyid())){
      out.write("\r\n");
      out.write("							<span style=\"color:gray;\">(작성자)</span>													\r\n");
      out.write("								");
}	
      out.write("\r\n");
      out.write("							 <span style=\"font-size:9pt; color:gray; margin-left:20px;\">");
      out.print(sdf.format(adto.getWriteday()) );
      out.write("</span>\r\n");
      out.write("							");

							//댓글 삭제는 로그인한 아이디와 같을 경우에만 삭제아이콘 보이게
							if(loginok!=null && adto.getMyid().equals(myid)){
      out.write("\r\n");
      out.write("						 	 <span class=\"adel glyphicon glyphicon-remove\" idx=\"");
      out.print(adto.getIdx());
      out.write("\"\r\n");
      out.write("						 	 style=\"cursor: pointer; margin-left: 10px\"></span>\r\n");
      out.write("					    	");
}	
      out.write("							\r\n");
      out.write("					    	<br>\r\n");
      out.write("					    	<span style=\"font-size:10pt;\">");
      out.print(adto.getContent().replace("\n", "<br>"));
      out.write("</span>					\r\n");
      out.write("						</td>		\r\n");
      out.write("					 </tr>											\r\n");
      out.write("					");
}											
					
      out.write("\r\n");
      out.write("				  </table>\r\n");
      out.write("  				</div>\r\n");
      out.write("  			  </div>						\r\n");
      out.write("			</td>\r\n");
      out.write("    	</tr>				\r\n");
      out.write("   </table>\r\n");
      out.write(" ");
}

      out.write("\r\n");
      out.write("	\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<!-- 페이징 처리 (이전, 다음 버튼은 페이징5개 넘어야 생김) -->\r\n");
      out.write("	<div style=\"width:600px; text-align: center;\">\r\n");
      out.write("		<ul class=\"pagination\">\r\n");
      out.write("		");

			//이전
			if(startPage > 1)
			{
      out.write("\r\n");
      out.write("				<li>\r\n");
      out.write("				 	<a href=\"index.jsp?main=guest/guestlist.jsp?currentPage=");
      out.print(startPage-1);
      out.write("\">이전</a>\r\n");
      out.write("				</li>\r\n");
      out.write("			");
}
			for(int pp=startPage; pp<=endPage; pp++){
				if(pp==currentPage)
				{
      out.write("\r\n");
      out.write("					<li class=\"active\">\r\n");
      out.write("					  <a href=\"index.jsp?main=guest/guestlist.jsp?currentPage=");
      out.print(pp);
      out.write('"');
      out.write('>');
      out.print(pp );
      out.write("</a>\r\n");
      out.write("					</li>\r\n");
      out.write("				");
}else{
      out.write("\r\n");
      out.write("					<li>\r\n");
      out.write("					  <a href=\"index.jsp?main=guest/guestlist.jsp?currentPage=");
      out.print(pp);
      out.write('"');
      out.write('>');
      out.print(pp );
      out.write("</a>\r\n");
      out.write("					</li>\r\n");
      out.write("				");
}
			}
			//다음버튼
			if(endPage < totalpage){
      out.write("\r\n");
      out.write("				<li>\r\n");
      out.write("					<a href=\"index.jsp?main=guest/guestlist.jsp?currentPage=");
      out.print(endPage+1);
      out.write("\">다음</a>\r\n");
      out.write("				</li>\r\n");
      out.write("			");
}
		
      out.write("\r\n");
      out.write("		</ul>\r\n");
      out.write("	</div>\r\n");
      out.write("<!-- 페이징 처리 끝-->\r\n");
      out.write("	\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
